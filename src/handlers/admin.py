import asyncio
import traceback
from pathlib import Path
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.config import ADMINS
from src.control_db import Database
from src.keyboards.admin import admin_kb, send_alarm
from src.keyboards.menu import hide_kb
from datetime import datetime
from src.handlers.payments import generate_random_string

router = Router()


class SendNews(StatesGroup):
    send_message = State()
    send_message_finish = State()
    send_news_users = State()
    send_news_premium = State()


@router.message(F.text == "db")
async def send_file_db(message: Message):
    if not (message.from_user.id in ADMINS):
        return

    file_path = types.FSInputFile("data/database.db")
    await message.bot.send_document(message.from_user.id, file_path)


@router.message(F.text == "db_migrate")
async def migrate_db(message: Message):
    if message.from_user.id not in ADMINS:
        return

    db = await Database.setup()
    result = await db.migrate1()
    await message.answer(result)


@router.message(Command("admin"))
async def admin(message: Message):
    if message.from_user.id in ADMINS:
        await message.delete()
        await message.answer("–û—Å—å –≤–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚¨áÔ∏è", reply_markup=admin_kb())


@router.message(F.text.startswith("add"))
async def add_fucking_stupid_people(message: Message):
    if message.from_user.id not in ADMINS:
        return

    db = await Database.setup()
    data = message.text.split()

    await db.add_premium_user(data[1])
    await db.update_premium_operations(
        telegram_id=int(data[1]),
        message_id=message.message_id,
        order_reference=generate_random_string(12),
        order_date=int(datetime.now().replace(hour=0, minute=0, second=0).timestamp()),
        reason_code=1100,
        transaction_status="Approved",
        price=int(data[2]),
    )

    # [N] NOTIFY ADMINISTRATOR
    await message.bot.send_message(
        chat_id=-1001902595324,
        message_thread_id=392,
        text=f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ @{await db.get_username(data[1])} {data[1]}\n–ö–æ–¥ –æ–ø–ª–∞—Ç–∏: 1100\n–¢–∏–ø: –û—Å–æ–±–∏—Å—Ç–∞ –æ–ø–ª–∞—Ç–∞",
    )
    await message.bot.send_message(
        text=f"–ü—ñ–¥–ø–∏—Å–∫–∞ {data[1]} –¥–æ–¥–∞–ª–∞—Å—å üü©",
        chat_id=-1001902595324,
        message_thread_id=481,
    )

    # [N] CHECK NEW OR OLD USER AND SEND NOTIFY
    if await db.get_bought_premium(data[1]) > 1:
        expiration_date = await db.get_expiration_date(data[1])
        await message.bot.send_message(
            chat_id=data[1],
            text=f"–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É, —ó—ó –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥–æ {expiration_date}",
            reply_markup=hide_kb(),
        )
        return
    expiration_date = await db.get_expiration_date(data[1])
    await message.bot.send_message(
        chat_id=data[1],
        text=f"–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–æ–Ω–∞ –¥—ñ—è—Ç–∏–º–µ –¥–æ {expiration_date}",
        reply_markup=hide_kb(),
    )


@router.message(F.text == "–í—Å—ñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ üë•")
async def all_people_from_db(message: Message):
    if message.from_user.id not in ADMINS:
        return
    await message.delete()

    db = await Database.setup()
    all_users = await db.get_all_user()
    text = "–í—Å—ñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ üë•"
    for telegram_id, first_name, username, parsing_post, date_join in all_users:
        date_join = datetime.strptime(date_join, "%Y-%m-%d %H:%M:%S.%f")
        formatted_date = date_join.strftime("%Y-%m-%d %H:%M")
        text += f"\nID: {telegram_id}"
        text += f"\n–Ü–º`—è: {first_name}"
        text += f"\n–ü—Å–µ–≤–¥–æ–Ω—ñ–º: {username}"
        text += f"\n–°—Ç–≤–æ—Ä–∏–≤ –ø–æ—Å—Ç—ñ–≤: {parsing_post}"
        text += f"\n–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {formatted_date}\n\n"

    file = types.BufferedInputFile(file=text.encode(), filename=f"–í—Å—ñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ.txt")
    await message.answer_document(file)


@router.message(F.text == "–í—Å—ñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ üëë")
async def all_premium_from_db(message: Message):
    if message.from_user.id not in ADMINS:
        return
    await message.delete()

    db = await Database.setup()
    all_premium = await db.get_all_premium()
    text = "–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ üëë"
    for (
        telegram_id,
        is_premium,
        expiration_date,
        bought_premium,
        date_purchase,
    ) in all_premium:
        text += f"\nID: {telegram_id}"
        text += f"\n–ü—Ä–µ–º—ñ—É–º: {'–∞–∫—Ç–∏–≤–Ω–∏–π' if is_premium else '–Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π'}"
        text += f"\n–ü–æ–∫—É–ø–æ–∫: {bought_premium}"
        text += f"\n–ö—É–ø–∏–≤\\–ü—Ä–æ–¥–æ–≤–∂–∏–≤: {date_purchase}"
        text += f"\n–î—ñ—î –¥–æ: {expiration_date}\n\n"

    file = types.BufferedInputFile(
        file=text.encode(), filename=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —â–æ –∫—É–ø—É–≤–∞–ª–∏.txt"
    )
    await message.answer_document(file)


@router.message(F.text == "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —â–æ –Ω–µ –º–∞–ª–∏ üëë")
async def people_ex(message: Message):
    if message.from_user.id not in ADMINS:
        return
    await message.delete()

    db = await Database.setup()
    all_users = await db.get_all_user()
    premium_users = await db.get_all_premium_telegram_id()
    premium_users = [item[0] for item in premium_users]
    new = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —â–æ –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ üëë:"

    for telegram_id, _, username, parsing_post, date_join in all_users:
        if telegram_id not in premium_users:
            date_join = datetime.strptime(date_join, "%Y-%m-%d %H:%M:%S.%f")
            formatted_date = date_join.strftime("%Y-%m-%d %H:%M")
            new += f"\n–Ü–º`—è: @{username}\nID: {telegram_id}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Ç–µ—Å—Ç: {'—Ç–∞–∫' if parsing_post > 0 else '–Ω—ñ'}\n–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {formatted_date}\n"

    file = types.BufferedInputFile(
        file=new.encode(), filename=f"–ù–µ –∫—É–ø—É–≤–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º.txt"
    )
    await message.answer_document(file)


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def stats(message: Message):
    await message.delete()
    if message.from_user.id not in ADMINS:
        return

    db = await Database.setup()
    operations = await db.get_stats_from_operation()
    operation_1day = await db.get_stats_from_operation(1)
    operation_7days = await db.get_stats_from_operation(7)
    operation_30days = await db.get_stats_from_operation(30)

    stats_all_time = {"count": operations[0], "sum": operations[1]}
    stats_1day = {"count": operation_1day[0], "sum": operation_1day[1]}
    stats_7day = {"count": operation_7days[0], "sum": operation_7days[1]}
    stats_30day = {"count": operation_30days[0], "sum": operation_30days[1]}
    zero = "0"

    generated_message = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É üìä:\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {await db.get_count_users()}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–æ—é –ø—ñ–¥–ø–∏—Å–∫–æ—é: {await db.get_count_premium_user(1)}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –Ω–µ –ø—Ä–æ–¥–æ–≤–∂–∏–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: {await db.get_count_premium_user(0)}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ —Ö–æ—á —Ä–∞–∑ –∫—É–ø—É–≤–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: {await db.get_count_premium_user(1) + await db.get_count_premium_user(0)}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥—É üìä:\n"
        f"–î–µ–Ω—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_1day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–∏–≤–µ–Ω—å - {stats_1day['sum'] if stats_1day['sum'] else zero}\n\n"
        f"–¢–∏–∂–¥–µ–Ω—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_7day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–∏–≤–µ–Ω—å - {stats_7day['sum'] if stats_7day['sum'] else zero}\n\n"
        f"–ú—ñ—Å—è—Ü—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_30day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–∏–≤–µ–Ω—å - {stats_30day['sum'] if stats_30day['sum'] else zero}\n\n"
        f"–ó–∞ –≤–µ—Å—å —á–∞—Å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_all_time['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–∏–≤–µ–Ω—å - {stats_all_time['sum'] if stats_all_time['sum'] else zero}\n\n"
    )

    await message.answer(text=generated_message, reply_markup=hide_kb())


@router.message(F.text == "–†–æ–∑—Å–∏–ª–∫–∞ üì¢")
async def alarm(message: Message):
    if message.from_user.id not in ADMINS:
        return

    text = "–ö–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç–∏? ü§î\n–û—Å–æ–±–∏—Å—Ç–æ üë§\n–í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–ºüë•\n–ü—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–ºüëë"
    await message.delete()
    await message.answer(text, reply_markup=send_alarm())


@router.callback_query(F.data == "–í—Å—ñ–º üë•")
async def send_alarm_all(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_news_users)


@router.callback_query(F.data == "–û—Å–æ–±–∏—Å—Ç–æ üë§")
async def send_alarm_single(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_message)


@router.message(SendNews.send_message, F.text)
async def send_message_single(message: Message, state: FSMContext):
    await state.set_state(SendNews.send_message_finish)
    await state.update_data(message=message.text)
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å telegram_id: ")


@router.message(SendNews.send_message_finish, F.text)
async def send_news_users(message: Message, state: FSMContext):
    data = await state.get_data()
    message_text = data["message"]
    await state.clear()
    try:
        await message.bot.send_message(
            chat_id=message.text, text=f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–≤: \n{message_text}"
        )
        await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
    except:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")


@router.callback_query(F.data == "–ü—Ä–µ–º—ñ—É–º üëë")
async def send_alarm_premium(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_news_premium)


@router.message(SendNews.send_news_premium, F.text)
async def send_news_premium(message: Message, state: FSMContext):
    db = await Database.setup()
    await state.clear()

    premium_user_ids = map(lambda e: e[0], await db.get_all_premium_telegram_id())

    if not premium_user_ids:
        await message.answer("–ù–µ–º–∞—î –ª—é–¥–µ–π –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é")
        return

    await asyncio.gather(*map(send_notification(message), premium_user_ids))

    await message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")


@router.message(SendNews.send_news_users, F.text)
async def send_mixed_news2(message: Message, state: FSMContext):
    db = await Database.setup()
    await state.clear()

    user_ids = map(lambda e: e[0], await db.get_all_user_telegram_id())

    if not user_ids:
        await message.answer("—É –±–æ—Ç—ñ –Ω–µ–º–∞—î –ª—é–¥–µ–π")
        return

    await asyncio.gather(*map(send_notification(message), user_ids))

    await message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")


def send_notification(message: Message):
    async def wrapped(user_id: int):
        try:
            await message.bot.send_message(user_id, text=message.text)
        except:
            pass

    return wrapped
