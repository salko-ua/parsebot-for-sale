import traceback
from datetime import datetime
from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.control_db import Database
from src.olx_api import get_data, Parser
from src.keyboards.parsing_edit import edit_parse_advert

router = Router()

class ParserState(StatesGroup):
    edit_caption = State()
    buttons = State()

@router.message(F.text.startswith("https://www.olx.ua"))
@router.message(F.text.startswith("https://olx.ua"))
@router.message(F.text.startswith("https://m.olx.ua"))
async def main(message: Message, bot: Bot, state: FSMContext):
    assert message.from_user is not None
    assert message.text is not None
    db = await Database.setup()
    date = datetime.now().timestamp()
    telegram_id = message.from_user.id

    if not await db.is_premium_user(telegram_id):
        if (await db.check_count_parsing_post(telegram_id))[0][0] >= 5:
            await message.answer("–ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º!")
            return

    try:
        parser = await get_data(message)
        await db.update_count_parsing_post(telegram_id)
        await db.add_url(telegram_id, url=message.text, date=date)
        await state.set_state(ParserState.buttons)
        await state.update_data(parser=parser, message=message)
    except Exception as e:
        text_for_admin = (
            f"–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞\n"
            f"Details: {e}\n"
            f"TraceBack: \n\n{traceback.format_exc()}\n"
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {message.text}"
        )
        await bot.send_message(chat_id=2138964363, text=text_for_admin)
        await message.answer(f"–ó–¥–∞—î—Ç—å—Å—è –ø–æ—Å—Ç —É–∂–µ –Ω–µ –¥—ñ–π—Å–Ω–∏–π üö´")

@router.callback_query(F.data == "‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω", ParserState.buttons)
async def add_template(query: CallbackQuery, state: FSMContext):
    db = await Database.setup()
    template = await db.get_template(telegram_id=query.from_user.id)

    if template is None or template == "":
        await query.answer("–í–∏ —â–µ –Ω–µ –º–∞—î—Ç–µ —à–∞–±–ª–æ–Ω—É –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö", show_alert=True)
        return
  
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")

    parser.update_template(update_to=template)
    
    await query.message.edit_caption(caption=parser.full_caption)
    await query.message.edit_reply_markup(reply_markup=edit_parse_advert(template=True))

@router.callback_query(F.data == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω", ParserState.buttons)
async def delete_template(query: CallbackQuery, state: FSMContext):
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")

    parser.update_template(update_to="")
    
    await query.message.edit_caption(caption=parser.full_caption)
    await query.message.edit_reply_markup(reply_markup=edit_parse_advert(template=False))

    
@router.callback_query(F.data == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", ParserState.buttons)
async def edit_caption(query: CallbackQuery, state: FSMContext):
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")

    
    await query.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç", show_alert=True)
    await query.message.delete()
    await query.message.answer(parser.header + "\n\n" + parser.caption)
    await state.set_state(ParserState.edit_caption)

@router.callback_query(F.data == "üîñ –î–æ–ø–æ–º–æ–≥–∞", ParserState.buttons)
async def help(query: CallbackQuery):
    alert = (
        f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏-\n"
        f"–†–µ–¥–∞–≥—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å –≤ –ø–æ—Å—Ç\n"
        f"üîÑ C–∫–∏–Ω—É—Ç–∏-\n"
        f"–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –ø–æ—á–∞—Ç–∫—É\n"
        f"‚ûï–î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω-\n"
        f"–î–æ–¥–∞—î –≤–∞—à —à–∞–±–ª–æ–Ω –≤ –ø–æ—Å—Ç\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∞–±–æ üîÅ –†–µ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª\n"
        f"–ù–∞–¥—Å–∏–ª–∞—î –≥–æ—Ç–æ–≤–∏–π –ø–æ—Å—Ç\n"
)
    await query.answer(text=alert, show_alert=True)
    
@router.message(F.text, ParserState.edit_caption)
async def edit_caption1(message: Message, state: FSMContext):
    assert message.text is not None
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")
    
    parser.update_header(update_to=message.text)
    parser.update_caption(update_to="")
    
    message = await message.answer_photo(photo=parser.images[0].media, caption=parser.full_caption, reply_markup=edit_parse_advert())
    await state.set_state(ParserState.buttons)




@router.callback_query(F.data == "üîÑ C–∫–∏–Ω—É—Ç–∏", ParserState.buttons)
async def reset(query: CallbackQuery, state: FSMContext):
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")
    parser.reset_all()
    
    await query.message.delete()
    await query.message.answer_photo(photo=parser.images[0].media, caption=parser.full_caption, reply_markup=edit_parse_advert())

@router.callback_query(F.data == "‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç", ParserState.buttons)
async def finish(query: CallbackQuery, state: FSMContext):
    data: dict = await state.get_data()
    parser: Parser = data.get("parser")
    await state.clear()

    await query.message.answer_media_group(media=parser.images)
    await query.answer("–ü–æ—Å—Ç –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ ‚úÖ", show_alert=True)

    await query.message.delete()

@router.callback_query(F.data == "üîÅ –†–µ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª", ParserState.buttons)
async def repost_to_group(query: CallbackQuery, state: FSMContext):
    db = await Database.setup()
    group_id = await db.get_group_id(telegram_id=query.from_user.id)

    if group_id == 0 or group_id is None:
        await query.answer("–í–∏ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–ª–∏ –∫–∞–Ω–∞–ª—É", show_alert=True)
        return

    data: dict = await state.get_data()
    parser: Parser = data.get("parser")
    
    try:
        await query.message.bot.send_media_group(chat_id=group_id, media=parser.images)
        await query.answer("–ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª ‚úÖ", show_alert=True)
        await state.clear()
        await query.message.delete()
    except Exception as e:
        await query.answer("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π id –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏ —è–∫–∏–π –≤–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏ —Ç–∞ —á–∏ –º–∞—î –±–æ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
    

